conf/
   Configuration files.

   BootStrap.groovy is the only modified file (by Andrew Young).  It runs
   when app is started, and populates default values for development
   purposes.

   NOTE: The file DataSource.groovy is not part of the git repository but
   needs to be added.  It contains the password for the database.

controllers/
   See README file in this dir.

domain/
   These are database tables.
      CaseStudyRegion.groovy
      DemographicData.groovy
      DemographicFeature.groovy
      DemographicFeatureCategory.groovy
      EthnographicData.groovy
      EthnographicFeature.groovy
      EthnographicFeatureCategory.groovy
      ExportSet.groovy
      GeneticData.groovy
      GeneticFeature.groovy
      GeneticFeatureCategory.groovy
      GrammaticalData.groovy
      GrammaticalFeature.groovy
      GrammaticalFeatureCategory.groovy
      LexicalData.groovy
      LexicalFeature.groovy
      LexicalFeatureCategory.groovy
      PartOfSpeech.groovy
      Profile.groovy
      Reconstruction.groovy
      ReconstructionData.groovy
      SemanticField.groovy
      Source.groovy
      SourceLanguage.groovy
      User.groovy
      
i18n/
   Translatable text used for localization.  Nothing here yet.

services/
   Classes available to all controllers.  See grails docs.

taglib/
   Custom tags for gsp files.  Written by Simon.

utils/
   Only CSVConverter.groovy.  Converts CSV to XML.  Used to populate database.

views/

   Contains views, used to generate front-end views, i.e. HTML pages
   which provide a front end onto the database.  The files are in
   GSP format, which is the Groovy template language that allows
   inserting Groovy statements into HTML code.

   Andrew says:
      Mostly empty, as real views are in the template/ folder.  If you
      create a view in this dir, it will appear instead of code in
      template/ folder.  Usually don't want to do that as there
      will be lots of code duplication.  Change templates instead.

   However, there's actually a lot of stuff here.  More comments from
   Andrew:

      I didn't think I had created views, but if I did then they were auto
      generated by grails. Simon might have hand tweaked some stuff, I'm not
      sure.

      You can generate the views for a given controller using the "grails
      generate-views <Foo>" command, where <Foo> is something like
      "LexicalFeature". This command uses the template code to produce the
      same files that would be produced at runtime.

      See: http://www.grails.org/doc/1.0x/guide/single.html#16.%20Scaffolding
